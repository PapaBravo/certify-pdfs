@startuml certifier-deployment

!define KubernetesPuml https://raw.githubusercontent.com/dcasati/kubernetes-PlantUML/master/dist

!includeurl KubernetesPuml/kubernetes_Common.puml
!includeurl KubernetesPuml/kubernetes_Context.puml
' !includeurl KubernetesPuml/kubernetes_Simplified.puml

hide stereotype

!definelong KubernetesEntityColoring(e_stereo)
skinparam rectangle<<e_stereo>> {
    BackgroundColor KUBERNETES_BG_COLOR
    BorderColor transparent
    Shadowing false
}
!enddefinelong


!definelong KubernetesEntity(e_alias, e_label, e_techn, e_descr, e_color, e_sprite, e_stereo)
rectangle "==e_label\n<color:e_color><$e_sprite></color>\n e_descr" <<e_stereo>> as e_alias
!enddefinelong

!includeurl KubernetesPuml/OSS/KubernetesSvc.puml
!includeurl KubernetesPuml/OSS/KubernetesIng.puml
!includeurl KubernetesPuml/OSS/KubernetesPod.puml
!includeurl KubernetesPuml/OSS/KubernetesRs.puml
!includeurl KubernetesPuml/OSS/KubernetesDeploy.puml
!includeurl KubernetesPuml/OSS/KubernetesJob.puml
!includeurl KubernetesPuml/OSS/KubernetesSecret.puml
!includeurl KubernetesPuml/OSS/KubernetesHpa.puml
!includeurl KubernetesPuml/OSS/KubernetesSts.puml

skinparam nodesep 10
skinparam ranksep 10


actor "User" as user
actor "External\nApplication" as extApp
left to right direction

Cluster_Boundary(cluster, "MikroK8s") {
    Namespace_Boundary(ns_default, "default") {
        KubernetesIng(ingress, "ingress", "", "")
        
        KubernetesSvc(svc_api, "api", "", "")
        KubernetesPod(pod_api, "api", "", "")
        Rel(svc_api, pod_api, "")


        KubernetesSvc(svc_client, "client service", "", "")
        KubernetesPod(pod_client, "client", "", "")
        Rel(svc_client, pod_client, "")
        
        KubernetesPod(pod_renderer, "renderer", "", "")

        frame chart_minio as "minio chart" {
            KubernetesPod(svc_minio, "minio service", "", "")
            KubernetesPod(pod_minio, "minio", "", "")
            ' KubernetesSts(sts_minio, "minio", "")
            ' KubernetesSecret(secret_minio_credentials, "credentials","")
        }
        
        KubernetesJob(job_minio, "minio post install", "", "")
        
        frame chart_redis as "redis chart" {
            KubernetesPod(svc_redis, "redis service", "", "")
            KubernetesPod(pod_redis, "redis", "", "")
        '     KubernetesSts(sts_redis, "redis", "")
        '     KubernetesSecret(secret_redis_credentials, "credentials","")
        }
    }

    Namespace_Boundary(ns_registry, "Registry") {
        KubernetesSvc(svc_registry, "registry", "", "")
    }

        Namespace_Boundary(ns_kube_system, "Kube System") {
        KubernetesSvc(svc_elastic, "elastic", "", "")
        KubernetesSvc(svc_kibana, "kibana", "", "")
    }
}

Rel(user, ingress, "Access GUI\nlocalhost:8080")
Rel(user, ingress, "Access results\nlocalhost:9000")
Rel(user, ingress, "Access API (via GUI)\nlocalhost:8081")
Rel(extApp, ingress, "Access API\nlocalhost:8081")

Rel(ingress,svc_api, "Forward API\n8081:80")
Rel(ingress,svc_client, "Forward GUI\n8080:80")
Rel(ingress,svc_minio, "Forward results\n9000:9000")

Rel(job_minio, svc_minio, "")

Rel(pod_api,svc_redis,"")
Rel(pod_renderer,svc_redis, "")
Rel(pod_renderer,svc_minio,"")
@enduml